type dom = {
  createElement: unit -> unit }
let div = { createElement = (fun ()  -> ()) } 
;;div.createElement ()
module Gah = struct let createElement () = ()  end
;;Gah.createElement ()
let asd = ((Bar.createElement ~foo:1 ~bar:2 ["a"; "b"])[@jsxa ][@foo ]) 
let asd = ((Bar.createElement ~foo:1 ~bar:2 ["a"; "b"] ())[@foo ]) 
;;Baz.Beee.createElement ~baz:2 ["a"; "b"] ()
;;Bar.createElement [foo] ()
;;Bar.createElement ~foo:1 ~bar:2 [] ()
;;Bar.createElement
    ~foo:(Baz.createElement ~baz:(Baaz.createElement [] ()) [] ()) [] ()
;;Div.createElement ~foo:1 ~bar:2 [] ()
;;Bar.createElement
    [Baz.Beee.createElement ~baz:2 ~kek:(Foo.createElement [] ()) ["a"; "b"]
       ();
    Bar.createElement [] ()] ()
;;ReactRe.createDOMElement "bar"
    (Js.Null.return
       ([%bs.obj
          {
            foo = 1;
            children =
              (ReactRe.createDOMElement "baz"
                 (Js.Null.return ([%bs.obj { qux = 2 }])) [||])
          }])) [||]
;;ReactRe.createCompositeElement bar_
    (Js.Null.return
       ([%bs.obj
          {
            foo = 1;
            children =
              (ReactRe.createCompositeElement baz_
                 (Js.Null.return ([%bs.obj { qux = 2 }])) [||])
          }])) [||]
